-- SETTINGS
local hopCooldown = 1 -- delay between server checks
local waitBeforeCheck = 300 -- 5 minutes

-- SERVICES
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer
local gui = player:WaitForChild("PlayerGui")

-- FLAGS
local hopping = true
local luckFound = false
local gameId = game.PlaceId

-- CLEAN UI if re-executed
if gui:FindFirstChild("LuckHopUI") then
    gui.LuckHopUI:Destroy()
end

-- UI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "LuckHopUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = gui

local function createStyledButton(name, text, posY, width, height)
    local button = Instance.new("TextButton")
    button.Name = name
    button.Size = UDim2.new(0, width, 0, height)
    button.Position = UDim2.new(0, 10, 0, posY)
    button.BackgroundColor3 = Color3.new(0, 0, 0)
    button.BackgroundTransparency = 0.5
    button.TextColor3 = Color3.new(1, 1, 1)
    button.Font = Enum.Font.SciFi
    button.TextSize = 20
    button.Text = text
    button.BorderSizePixel = 0
    button.TextWrapped = true

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = button

    spawn(function()
        local h = 0
        while true do
            button.TextColor3 = Color3.fromHSV(h, 1, 1)
            h = (h + 0.01) % 1
            wait(0.03)
        end
    end)

    button.Parent = screenGui
    return button
end

-- Create Toggle Button (Top)
local toggleButton = createStyledButton("ToggleButton", "Luck Hopper: ON", 30, 250, 40)

-- Create Status Button (Below)
local statusButton = createStyledButton("StatusButton", "Status: ‚è≥ Waiting...", 80, 300, 38)

-- Toggle logic
toggleButton.MouseButton1Click:Connect(function()
    hopping = not hopping
    toggleButton.Text = hopping and "Luck Hopper: ON" or "Luck Hopper: OFF"
end)

-- Anti-AFK
pcall(function()
    for _, conn in ipairs(getconnections(player.Idled)) do
        conn:Disable()
    end
end)
player.Idled:Connect(function()
    local vu = game:GetService("VirtualUser")
    vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    wait(1)
    vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)

-- Server listing function
local function getServers()
    local url = "https://games.roblox.com/v1/games/" .. gameId .. "/servers/Public?sortOrder=Asc&limit=100"
    local success, result = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(url))
    end)
    local list = {}
    if success and result and result.data then
        for _, s in ipairs(result.data) do
            if s.playing < s.maxPlayers and s.id ~= game.JobId then
                table.insert(list, s.id)
            end
        end
    end
    return list
end

-- Main hopping logic
spawn(function()
    wait(3)
    while true do
        if hopping and not luckFound then
            for i = waitBeforeCheck, 1, -1 do
                statusButton.Text = string.format("Status: ‚è≥ Waiting... %ds", i)
                wait(1)
            end

            -- üîÅ New grace delay after timer
            statusButton.Text = "‚è≥ Checking for Luck..."
            wait(3)

            -- Luck detection logic
            local luckFrame
            pcall(function()
                luckFrame = gui:FindFirstChild("Bottom_UI", true)
                    :FindFirstChild("BottomFrame", true)
                    :FindFirstChild("Holder", true)
                    :FindFirstChild("List", true)
                    :FindFirstChild("Luck", true)
            end)

            if luckFrame and luckFrame.Visible and luckFrame.Active then
                luckFound = true
                statusButton.Text = "‚úÖ Status: Playtime Luck FOUND!"
                setclipboard("https://www.roblox.com/games/" .. gameId .. "?jobId=" .. game.JobId)
            else
                statusButton.Text = "‚ùå No Luck | Hopping..."
                local servers = getServers()
                if #servers > 0 then
                    TeleportService:TeleportToPlaceInstance(gameId, servers[math.random(1, #servers)])
                else
                    statusButton.Text = "‚ö†Ô∏è No servers found. Retrying..."
                end
            end
        end
        wait(hopCooldown)
    end
end)
